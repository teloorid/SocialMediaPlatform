{
  "info": {
    "name": "Social Media API - Complete Authentication Testing",
    "description": "Comprehensive authentication endpoints with automated testing scripts",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api/v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "resetToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. User Registration Tests",
      "item": [
        {
          "name": "✅ Register Valid User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser_{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"Password123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains access token', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.accessToken).to.exist;",
                  "    pm.environment.set('accessToken', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('Response contains user data', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.user).to.exist;",
                  "    pm.expect(response.data.user.email).to.exist;",
                  "    pm.expect(response.data.user.username).to.exist;",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "});",
                  "",
                  "pm.test('Password is not returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.user.password).to.not.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Register Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"duplicate_test\",\n  \"email\": \"duplicate@example.com\",\n  \"password\": \"Password123!\",\n  \"firstName\": \"Duplicate\",\n  \"lastName\": \"Test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', () => {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message mentions duplicate', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error.toLowerCase()).to.include('duplicate');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// First register a user to create duplicate",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/auth/register',",
                  "    method: 'POST',",
                  "    header: {",
                  "        'Content-Type': 'application/json'",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            username: 'duplicate_setup',",
                  "            email: 'duplicate@example.com',",
                  "            password: 'Password123!',",
                  "            firstName: 'Duplicate',",
                  "            lastName: 'Setup'",
                  "        })",
                  "    }",
                  "}, (err, res) => {",
                  "    // Ignore result - just setting up duplicate",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Register Invalid Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"invalid-email\",\n  \"password\": \"Password123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', () => {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error.toLowerCase()).to.include('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Register Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', () => {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has password validation error', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error.toLowerCase()).to.include('password');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. User Login Tests",
      "item": [
        {
          "name": "✅ Login with Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"logintest\",\n  \"password\": \"Password123!\",\n  \"rememberMe\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Create user for login test",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/auth/register',",
                  "    method: 'POST',",
                  "    header: {",
                  "        'Content-Type': 'application/json'",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            username: 'logintest',",
                  "            email: 'logintest@example.com',",
                  "            password: 'Password123!',",
                  "            firstName: 'Login',",
                  "            lastName: 'Test'",
                  "        })",
                  "    }",
                  "}, (err, res) => {",
                  "    // User created for login test",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains access token', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.accessToken).to.exist;",
                  "    pm.environment.set('accessToken', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('Response contains refresh token', () => {",
                  "    const response = pm.response.json();",
                  "    if (response.data.refreshToken) {",
                  "        pm.environment.set('refreshToken', response.data.refreshToken);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response contains user data', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.user).to.exist;",
                  "    pm.expect(response.data.user.username).to.equal('logintest');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "✅ Login with Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"logintest@example.com\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful with email', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.accessToken).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Login Wrong Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"logintest\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid credentials', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error.toLowerCase()).to.include('invalid');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Login Non-existent User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistent\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid credentials', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Protected Routes Tests",
      "item": [
        {
          "name": "✅ Get Current User (Authenticated)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user data', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.exist;",
                  "    pm.expect(response.data.email).to.exist;",
                  "    pm.expect(response.data.username).to.exist;",
                  "});",
                  "",
                  "pm.test('Password is not returned', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.password).to.not.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Get Current User (No Token)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates access denied', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error.toLowerCase()).to.include('access denied');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Get Current User (Invalid Token)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', () => {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid token', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.error.toLowerCase()).to.include('invalid');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Profile Management Tests",
      "item": [
        {
          "name": "✅ Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"bio\": \"This is my updated bio for testing purposes.\",\n  \"location\": \"Test City, TC\",\n  \"website\": \"https://example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.firstName).to.equal('Updated');",
                  "    pm.expect(response.data.lastName).to.equal('Name');",
                  "    pm.expect(response.data.bio).to.equal('This is my updated bio for testing purposes.');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "✅ Update Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"Password123!\",\n  \"newPassword\": \"NewPassword123!\",\n  \"confirmPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "password"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Password updated successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message.toLowerCase()).to.include('password');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Update Password (Wrong Current)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"WrongPassword!\",\n  \"newPassword\": \"NewPassword123!\",\n  \"confirmPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "password"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 401', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
                  "});",
                  "",
                  "pm.test('Response indicates incorrect current password', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Password Reset Tests",
      "item": [
        {
          "name": "✅ Forgot Password Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"logintest@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "forgot-password"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reset email sent successfully', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message.toLowerCase()).to.include('email');",
                  "});",
                  "",
                  "// Store reset token if provided in response",
                  "pm.test('Store reset token if available', () => {",
                  "    const response = pm.response.json();",
                  "    if (response.resetToken) {",
                  "        pm.environment.set('resetToken', response.resetToken);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "❌ Forgot Password (Invalid Email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "forgot-password"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Some implementations return 200 for security (don't reveal if email exists)",
                  "pm.test('Status code is 200 or 404', () => {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response handled appropriately', () => {",
                  "    const response = pm.response.json();",
                  "    // Either success (security) or error (user not found)",
                  "    pm.expect(typeof response.success).to.equal('boolean');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "6. Logout Tests",
      "item": [
        {
          "name": "✅ Logout Single Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message.toLowerCase()).to.include('logout');",
                  "});",
                  "",
                  "// Clear stored tokens",
                  "pm.environment.set('accessToken', '');",
                  "pm.environment.set('refreshToken', '');"
                ]
              }
            }
          ]
        },
        {
          "name": "✅ Logout All Sessions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout-all",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout-all"
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Login again to get fresh token for logout-all test",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/auth/login',",
                  "    method: 'POST',",
                  "    header: {",
                  "        'Content-Type': 'application/json'",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            username: 'logintest',",
                  "            password: 'NewPassword123!' // Updated password from previous test",
                  "        })",
                  "    }",
                  "}, (err, res) => {",
                  "    if (res && res.json().data && res.json().data.accessToken) {",
                  "        pm.environment.set('accessToken', res.json().data.accessToken);",
                  "    }",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', () => {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message.toLowerCase()).to.include('logout');",
                  "});",
                  "",
                  "// Clear stored tokens",
                  "pm.environment.set('accessToken', '');",
                  "pm.environment.set('refreshToken', '');"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}